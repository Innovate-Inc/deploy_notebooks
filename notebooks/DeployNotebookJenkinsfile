//  Pipeline to update agol content
def notebook_script = 'notebooks/R9_Fires.py'
def func_script = ['notebooks/func.py']
def working_dir = 'notebooks'
def changed=0

pipeline {
    agent { docker { image 'python:3.7.9' } }
    environment {
          agol_creds = credentials('agol_geoplatform')
    }
    stages {
        stage('dynamic stages') {
            when {branch 'main'}
            steps {
                script {
                try {
                    echo "working dir: $working_dir"
                    changed = sh (script:"git diff --quiet main origin/main -- $working_dir || echo 'changed'", returnStdout:true)
                    echo "changed: ${changed}"
                    if (changed.trim() == "changed"){
                        echo 'is changed'
                    } else {
                        echo 'not changed'
                    }

                    if (changed.trim()=="changed"){
                        echo 'proceeding...'
                            stage("deploy ipynb $notebook_script") {
                                withEnv(["HOME=${env.WORKSPACE}"]) {
                                    sh 'python --version'
                                    sh 'pip install -r notebooks/requirements.txt --user'
                                    sh "python -m pytest notebooks/tests"
                                    sh 'python -c "import sys; print(sys.path)"'
                                    sh "python -c 'from notebooks.func import update_ipynb; update_ipynb(\"$notebook_script\", \"$agol_creds_USR\", \"$agol_creds_PSW\", input_func=\"$func_script\")'"
                                    }
                            }
                    }
                    } catch (Exception e) {
                        echo e.toString()
                    }

                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        failure {
            echo 'failure'
        // alert
        }
        success {
            echo 'success'
        // alert
        }
    }
}

